const axios = require('axios').default;
const { AuthressClient, ServiceClientTokenProvider } = require('authress-sdk');

const getProcoreAuthToken = async () => {
  const authressUserID = 'uiajkHAPPe3xrBnQ7bek96hMY'
  //comes from oauth connections
  const authressConnectionID = 'con_88f6AD6yGNjwyHVVgTP2Y4'
  const authressAccountID = 'ihz3xlu9h6tsxtwmbmwot9zbk'
  // api end-point for no prod calls , generated by authress
  const serviceClientSecret = 'sc_bgoY7STuNZk7nmjjSK67r6H.sqDE.ihz3xlu9h6tsxtwmbmwot9zbk.MC4CAQAwBQYDK2VwBCIEIBVr68aretLUoKXIX3pXx5rlNYDlsEDfvv+lGJ1ofH2f';
  const authressClient = new AuthressClient({ baseUrl: `https://${authressAccountID}.api-eu-west.authress.io` }, new ServiceClientTokenProvider(serviceClientSecret));
  // authress access_token get assigned after trying to connect with TEST CONNECTION
  try {
    // await authressClient.setToken(authressAccessToken)
    const result = await authressClient.connections.getConnectionCredentials(authressConnectionID, authressUserID)
    if(result.data) {
      return result.data.accessToken
    }
  } catch(e) {
    console.log(e.data.title)
  }
}

const fetchAllProjects = async (token) => {
  const companyProjectsURL = 'https://sandbox.procore.com/rest/v1.0/companies/31985/projects'
  const options = { headers: { "Authorization": `Bearer ${token}`}}
  try {
    const getAllProjects = await axios.get(companyProjectsURL, options)
    if(getAllProjects.data.length) return getAllProjects.data
  } catch(e) {
      console.log(e.message)
  }
}

const fetchTasks = async (token, api) => {
  const taskItemsURL = 'https://sandbox.procore.com/rest/v1.0/task_items?'
  const options = { headers: { "Authorization": `Bearer ${token}`}}
  
  try {
      const allProjects = await api.fetchAllProjects(token)
      if(allProjects.length) {
      //retrieves the test project by ID
      const testProject = allProjects.find( project => project.id === 28001)
      //list Task Items for the test project
      const listTaskItemsForProject = await axios.get(`${taskItemsURL}project_id=${testProject.id}`, options )
      if(listTaskItemsForProject.data) return listTaskItemsForProject.data
    }
  } catch (e) {
      e.message
  }
}

module.exports = {
    getProcoreAuthToken,
    fetchAllProjects,
    fetchTasks
}